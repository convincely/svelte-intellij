{
  generate=[
    java="8"
    names="long"
//    psi-classes-map="yes"
  ]

  parserClass="dev.blachut.svelte.lang.parsing.top.SvelteParser"

  extends="dev.blachut.svelte.lang.psi.SveltePsiElementImpl"

  psiClassPrefix="Svelte"
  psiImplClassSuffix="Impl"
  psiPackage="dev.blachut.svelte.lang.psi"
  psiImplPackage="dev.blachut.svelte.lang.psi.impl"

  parserImports=["static dev.blachut.svelte.lang.parsing.top.SvelteManualParsing.*"]

  elementTypeHolderClass="dev.blachut.svelte.lang.psi.SvelteTypes"
  elementTypeClass="dev.blachut.svelte.lang.psi.SvelteElementType"
  tokenTypeClass="dev.blachut.svelte.lang.psi.SvelteElementType"

  tokens = [
    START_OPENING_MUSTACHE="{#"
    START_INNER_MUSTACHE="{:"
    START_CLOSING_MUSTACHE="{/"
    START_MUSTACHE="{"
    END_MUSTACHE="}"
    IF="if"
    EACH="each"
    AS="as"
    COMMA=","
    START_PAREN="("
    END_PAREN=")"
    AWAIT="await"
    THEN="then"
    CATCH="catch"
    ELSE="else"
    HTML_PREFIX="@html"
    DEBUG_PREFIX="@debug"
    HTML_FRAGMENT="<markup>"
    CODE_FRAGMENT="<code>"
    LAZY_IF="LAZY_IF"
    LAZY_ELSE="LAZY_ELSE"
    LAZY_EACH="LAZY_EACH"
    LAZY_AWAIT="LAZY_AWAIT"
    LAZY_THEN="LAZY_THEN"
    LAZY_CATCH="LAZY_CATCH"
    TEMP_PREFIX="TEMP_PREFIX"
    HASH="HASH"
    COLON="COLON"
    SLASH="SLASH"
    AT="AT"
  ]

  extends(".*Block")=block
  extends(".*OpeningTag")=openingTag
  extends(".*ContinuationTag")=continuationTag
  extends(".*ClosingTag")=closingTag

  pin("awaitThenBlockOpeningTag")=4
  pin("elseIfContinuationTag")=3
  pin(".*Tag")=2
  pin("interpolation")=1
  recoverWhile(".*Tag|interpolation")=mustache_recover
}

// First rule is always implicitly private
svelteComponent ::= privateScope
scope ::= privateScope

private mustache_recover ::= !('{' | '{#' | "{:" | "{/" | HTML_FRAGMENT)

private privateScope ::= (block|interpolation|HTML_FRAGMENT)*

interpolation ::= '{' expressionPrefix? expression '}'
private expressionPrefix ::= '@html' | '@debug'

block ::= ifBlock | eachBlock | awaitBlock

ifBlock ::= ifBlockOpening elseIfContinuation* elseContinuation? ifBlockClosingTag {pin=1}
ifBlockOpening ::= ifBlockOpeningTag scope
ifBlockOpeningTag ::= '{#' 'if' expression '}'
elseIfContinuation ::= elseIfContinuationTag scope {name="else if block"}
elseIfContinuationTag ::= '{:' 'else' 'if' expression '}'
ifBlockClosingTag ::= '{/' 'if' '}'

eachBlock ::= eachBlockOpening elseContinuation? eachBlockClosingTag {pin=1}
eachBlockOpening ::= eachBlockOpeningTag scope
eachBlockOpeningTag ::= '{#' 'each' expression 'as' parameter (',' parameter)? keyExpression? '}'
eachBlockClosingTag ::= '{/' 'each' '}'

awaitBlock ::= (awaitThenBlockOpening | awaitAndThen) (catchContinuation)? awaitBlockClosingTag {pin=1}
private awaitAndThen ::= awaitBlockOpening thenContinuation {pin=1}
awaitThenBlockOpening ::= awaitThenBlockOpeningTag scope
awaitThenBlockOpeningTag ::= '{#' 'await' expression 'then' parameter '}'
awaitBlockOpening ::= awaitBlockOpeningTag scope
awaitBlockOpeningTag ::= '{#' 'await' expression '}'
thenContinuation ::= thenContinuationTag scope {name="then block"}
thenContinuationTag ::= '{:' 'then' parameter '}'
catchContinuation ::= catchContinuationTag scope {name="catch block"}
catchContinuationTag::= '{:' 'catch' parameter '}'
awaitBlockClosingTag ::= '{/' 'await' '}'

elseContinuation ::= elseContinuationTag scope {name="else block"}
elseContinuationTag ::= '{:' 'else' '}'

fake openingTag ::= '{#' foo '}'
fake continuationTag ::= '{:' foo '}'
fake closingTag ::= '{/' foo '}'

keyExpression ::= '(' <<parseExpression>> ')' { pin=1 }
expression ::= <<parseExpression>>
parameter ::= <<parseParameter>>
